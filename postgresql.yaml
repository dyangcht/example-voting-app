apiVersion: v1
kind: Pod
metadata:
  annotations:
    k8s.v1.cni.cncf.io/network-status: |-
      [{
          "name": "",
          "interface": "eth0",
          "ips": [
              "10.128.2.122"
          ],
          "default": true,
          "dns": {}
      }]
    k8s.v1.cni.cncf.io/networks-status: |-
      [{
          "name": "",
          "interface": "eth0",
          "ips": [
              "10.128.2.122"
          ],
          "default": true,
          "dns": {}
      }]
    kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container postgresql; cpu limit for container postgresql'
    openshift.io/deployment-config.latest-version: "1"
    openshift.io/deployment-config.name: postgresql
    openshift.io/deployment.name: postgresql-1
    openshift.io/generated-by: OpenShiftNewApp
    openshift.io/scc: restricted
  creationTimestamp: "2021-02-19T13:57:12Z"
  generateName: postgresql-1-
  labels:
    deployment: postgresql-1
    deploymentconfig: postgresql
    name: postgresql
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:openshift.io/deployment-config.latest-version: {}
          f:openshift.io/deployment-config.name: {}
          f:openshift.io/deployment.name: {}
          f:openshift.io/generated-by: {}
        f:generateName: {}
        f:labels:
          .: {}
          f:deployment: {}
          f:deploymentconfig: {}
          f:name: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"67036513-b66e-4c8e-a0d4-6974c279ca57"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        f:containers:
          k:{"name":"postgresql"}:
            .: {}
            f:env:
              .: {}
              k:{"name":"POSTGRESQL_DATABASE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:secretKeyRef:
                    .: {}
                    f:key: {}
                    f:name: {}
              k:{"name":"POSTGRESQL_PASSWORD"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:secretKeyRef:
                    .: {}
                    f:key: {}
                    f:name: {}
              k:{"name":"POSTGRESQL_USER"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:secretKeyRef:
                    .: {}
                    f:key: {}
                    f:name: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:livenessProbe:
              .: {}
              f:exec:
                .: {}
                f:command: {}
              f:failureThreshold: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":5432,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:exec:
                .: {}
                f:command: {}
              f:failureThreshold: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:limits:
                .: {}
                f:memory: {}
              f:requests:
                .: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:capabilities: {}
              f:privileged: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/var/lib/pgsql/data"}:
                .: {}
                f:mountPath: {}
                f:name: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
        f:volumes:
          .: {}
          k:{"name":"postgresql-data"}:
            .: {}
            f:emptyDir: {}
            f:name: {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-02-19T13:57:12Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:k8s.v1.cni.cncf.io/network-status: {}
          f:k8s.v1.cni.cncf.io/networks-status: {}
    manager: multus
    operation: Update
    time: "2021-02-19T13:57:14Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.128.2.122"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2021-02-19T13:57:28Z"
  name: postgresql-1-mwwsg
  namespace: result
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicationController
    name: postgresql-1
    uid: 67036513-b66e-4c8e-a0d4-6974c279ca57
  resourceVersion: "113770"
  selfLink: /api/v1/namespaces/result/pods/postgresql-1-mwwsg
  uid: 9468dec5-b81a-4532-8c31-818b018674e9
spec:
  containers:
  - env:
    - name: POSTGRESQL_USER
      valueFrom:
        secretKeyRef:
          key: database-user
          name: postgresql
    - name: POSTGRESQL_PASSWORD
      valueFrom:
        secretKeyRef:
          key: database-password
          name: postgresql
    - name: POSTGRESQL_DATABASE
      valueFrom:
        secretKeyRef:
          key: database-name
          name: postgresql
    image: image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:2ca9bb33c11531c013fa0dc62086dce974dfa5961366cc05e4bcee8180108c66
    imagePullPolicy: IfNotPresent
    livenessProbe:
      exec:
        command:
        - /usr/libexec/check-container
        - --live
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    name: postgresql
    ports:
    - containerPort: 5432
      protocol: TCP
    readinessProbe:
      exec:
        command:
        - /usr/libexec/check-container
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 512Mi
    securityContext:
      capabilities:
        drop:
        - KILL
        - MKNOD
        - SETGID
        - SETUID
      privileged: false
      runAsUser: 1000750000
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/lib/pgsql/data
      name: postgresql-data
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-vbwvt
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: default-dockercfg-b29zf
  nodeName: ip-10-0-155-126.ec2.internal
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 1000750000
    seLinuxOptions:
      level: s0:c27,c24
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  - effect: NoSchedule
    key: node.kubernetes.io/memory-pressure
    operator: Exists
  volumes:
  - emptyDir: {}
    name: postgresql-data
  - name: default-token-vbwvt
    secret:
      defaultMode: 420
      secretName: default-token-vbwvt
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2021-02-19T13:57:12Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2021-02-19T13:57:28Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2021-02-19T13:57:28Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2021-02-19T13:57:12Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://5b197cd7bc6f113fa91b60b7fabab05b48892a7a7f9481fd5222da7ce403c3c6
    image: image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:2ca9bb33c11531c013fa0dc62086dce974dfa5961366cc05e4bcee8180108c66
    imageID: image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:2ca9bb33c11531c013fa0dc62086dce974dfa5961366cc05e4bcee8180108c66
    lastState: {}
    name: postgresql
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2021-02-19T13:57:23Z"
  hostIP: 10.0.155.126
  phase: Running
  podIP: 10.128.2.122
  podIPs:
  - ip: 10.128.2.122
  qosClass: Burstable
  startTime: "2021-02-19T13:57:12Z"
